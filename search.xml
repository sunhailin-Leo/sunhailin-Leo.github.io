<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[支付宝爬虫(Scrapy版本)]]></title>
      <url>/2019/01/02/AlipayScrapy/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="Now">目前的进度</h3>

<ul>
<li><p>2019年1月2日:</p>
<ul>
<li><p>目前建议运行AlipayCore_v2的代码(如果没有装pywin32的依赖的话尽量不要使用AlipayCore)</p>
</li>
<li><p>好久一段时间没有更新了(账单通过selenium的方式基本上都会被支付宝识破了)</p>
</li>
<li>爬取账单的接口的核心就是cookie的有效性,打算之后从cookie的有效性上开始入手</li>
<li>目前代码基本定型,后续需要交流的可以加我的微信或者QQ或者提issue也可以(目前暂时因为工作原因没有太多精力去研究了)</li>
<li><p>可能通过验证码登录的方式会比较有效(但是偶尔也会被封~)</p>
</li>
<li><p>新增的一些东西:</p>
</li>
<li>spiders下新增了一个v2的方式就是通过Scrapy结合urllib的形式进行爬取(偶尔可行,主要还是需要面对支付宝的点击流模型)</li>
<li>utils下就新增bill_page_option(一下账单的参数), bill_parser简单的urllib的爬虫</li>
</ul>
</li>
</ul>
<a id="more"></a>
<hr>
<h3 id="Q&A">问题反馈</h3>

<p>在使用中有任何问题，可以反馈给我，以下联系方式跟我交流:  </p>
<ul>
<li><p>Author: Leo</p>
</li>
<li><p>Wechat: Leo-sunhailin</p>
</li>
<li><p>E-mail: 379978424@qq.com </p>
</li>
<li><p>Github URL: <a href="https://github.com/sunhailin-Leo/AlipaySpider-Scrapy" target="_blank" rel="noopener">项目链接</a></p>
</li>
</ul>
<hr>
<h3 id="DevelopEnv">开发环境</h3>

<ul>
<li><p>系统版本：Win10 x64</p>
</li>
<li><p>Python版本：3.4.4</p>
<ul>
<li><p>Python库版本列表:</p>
<ul>
<li><p>Pillow: 5.0.0</p>
</li>
<li><p>Scrapy：1.4.0</p>
</li>
<li><p>selenium：3.8.1</p>
</li>
<li><p>requests：2.18.4</p>
</li>
<li><p>pymongo：3.6.0</p>
</li>
<li><p>python_dateutil：2.6.1</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Ps: 一定要配好Python的环境,不然Scrapy的命令可能会跑不起来</p>
</li>
</ul>
<hr>
<h3 id="DevelopEnv">安装和运行方式</h3><br><em> 安装库<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目根目录下,打开命令行</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

</em> 启动<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目根目录下,启动爬虫</span></span><br><span class="line">scrapy crawl AlipaySpider -a username=<span class="string">"你的用户名"</span> -a password=<span class="string">"你的密码"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必选参数</span></span><br><span class="line">-a username=&lt;账号&gt;</span><br><span class="line">-a password=&lt;密码&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">-a option=&lt;爬取类型&gt;</span><br><span class="line"><span class="comment"># 1 -&gt; 购物; 2 -&gt; 线下; 3 -&gt; 还款; 4 -&gt; 缴费</span></span><br><span class="line"><span class="comment"># 这里面有四种类型数据对应四种不同的购物清单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment"># 实验版本</span></span><br><span class="line">scrapy crawl AlipayQR</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时还没有参数, 能登陆到个人页面了.</span></span><br></pre></td></tr></table></figure><br><br>—<br><br><h3 id="Function">功能</h3>

<ol>
<li>模拟登录支付宝(账号密码和二位都可以登陆)</li>
<li>获取自定义账单记录和花呗剩余额度(2017年10月份的时候个人页面还有花呗总额度的,后面改版没有了.再之后又出现了,应该是支付宝内部在做调整)</li>
<li>数据存储在MongoDB中(暂时存储在MongoDB,后续支持sqlite,json或其他格式的数据)</li>
<li>日志记录系统,启动爬虫后会在项目根目录下创建一个Alipay.log的文件(同时写入文件和输出在控制台)</li>
</ol>
<hr>
<h3 id="TechPoints">技术点</h3>

<p>吐槽一下: 这点可能没啥好说,因为代码是从自己之前写的用非框架的代码搬过来的,搬过来之后主要就是适应Scrapy这个框架,理解框架的意图和执行顺序以及项目的结构,然后进行兼容和测试。</p>
<p>我这个项目主要就用到Spider模块(即爬虫模块),Pipeline和item(即写数据的管道和实体类)</p>
<p>Downloader的那块基本没做处理,因为核心还是在用selenium + webdriver,解析页面用的是Scrapy封装好的Selector.</p>
<p><strong>Scrapy具体的流程看下图: (从官方文档搬过来的)</strong></p>
<p><img src="http://scrapy-chs.readthedocs.io/zh_CN/0.24/_images/scrapy_architecture.png" alt="image"></p>
<hr>
<h3 id="FreeChat">题外话</h3>

<p>题外话模块:<br>    上一段讲到了一个Selector,这个是东西是Scrapy基于lxml开发的,但是真正用的时候其实和lxml的selector有点区别.</p>
<p>举个例子吧：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两段相同的标签获取下面的文字的方式</span></span><br><span class="line"><span class="comment"># lxml</span></span><br><span class="line">name = str(tr.xpath(<span class="string">'td[@class="name"]/p/a/text()'</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Scrapy</span></span><br><span class="line">name = tr.xpath(<span class="string">'string(td[@class="name"]/p/a)'</span>).extract()[<span class="number">0</span>].strip()</span><br></pre></td></tr></table></figure></p>
<p>两行代码对同一个标签的文字提取的方法有些不一样,虽然到最后的结果一样。</p>
<p>lxml中有一个”string(.)”方法也是为了提取文字,但是这个方法是要在先指定了父节点或最小子节点后再使用,就可以获取父节点以下的所有文字或最小子节点对应的文字信息.</p>
<p>而Scrapy的Selector则可以在”string(.)”里面写入标签,方便定位,也很清晰的看出是要去获取文字信息.</p>
<p>具体区别其实可以对比下我非框架下的和Scrapy框架下的代码,里面用xpath定位的方式有点不一样.</p>
<ol>
<li>selenium + lxml: <a href="https://github.com/sunhailin-Leo/Alipay-Spider" target="_blank" rel="noopener">非框架</a></li>
<li>Scrapy + selenium: <a href="https://github.com/sunhailin-Leo/AlipaySpider-Scrapy" target="_blank" rel="noopener">Scrapy</a></li>
</ol>
<hr>
<h3 id="Future">未来的进度</h3>

<ol>
<li>数据源保存的可选择性(从多源选择单源写入到多源写入)</li>
<li>修改配置文件的自由度(增加修改settings.py的参数)</li>
<li>尽可能优化爬虫的爬取速度</li>
<li>研究Scrapy的自定义命令的写法,提高扩展性</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Scrapy </tag>
            
            <tag> Alipay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年12月总结]]></title>
      <url>/2018/12/31/summary_2018_12/</url>
      <content type="html"><![CDATA[<h4 id="12月的总结"><a href="#12月的总结" class="headerlink" title="12月的总结."></a>12月的总结.</h4><ul>
<li>Emirates 德奥捷之旅 &amp; 工作<a id="more"></a>
</li>
</ul>
<hr>
<p>年关将至<br>2018年的最后一个月发生了许多事情<br>还是按以往的方式来总结好了</p>
<p>生活方面那不得不提提欧洲之行<br>签证签的晚到的也晚<br>离出发还有两天的时候才到的<br>一度以为要赶不上了<br>自到拆开签证信里头没有拒签信<br>我的心总算是定了下来<br>之后的两天为了奔波买衣服和鞋子<br>花了不少时间也花了不少钱<br>也感谢我的女朋友一直耐心的陪我各种试</p>
<p>出发当天想想要体验将近17个小时的Emirates<br>心里还是相当小激动<br>去香港机场坐飞机真的从深圳坐船去方便超多<br>时间短性价比高托运不用排队还能退船票税<br>去的航班分了三段(香港-曼谷-迪拜-慕尼黑)<br>体验了三段不同位置的经济舱<br>带着从时光老人身上偷走的7个小时到了慕尼黑<br>冬天的慕尼黑之旅还是要强烈推荐下楚格峰<br>让我这从来没见过雪的孩纸一口气看饱了<br>慕尼黑总的来说节奏还是比较慢的<br>去了三分之一个德意志国家博物馆(时间问题)<br>去了圣诞集市吃了猪手和香肠也喝了啤酒<br>除了消费是真的有点儿高<br>其他方面的体验还是不错的<br>比较深度体验了慕尼黑的轨道交通(包括铁路)<br>完全感受不到德国人的严谨之处<br>用户体验极差的地铁票贩售机<br>时常晚点的轻轨和列车系统<br>之后还去了萨尔茨堡(奥地利)和布拉格(捷克)<br>在萨尔茨堡参观了莫扎特的故居和出生地以及萨尔茨堡要塞<br>在布拉格感受到经济差异所带来的年代感<br>沿着布拉格市中心广场经过查理大桥上到了布拉格城堡<br>观看了城堡的换岗仪式也体验了带有相当历史年代感的捷克地铁<br>东欧的国家消费水平都不高<br>但是却很有着发达地区没有的那种年代感</p>
<p>回头来说说工作上的事<br>月头开始研究安卓虚拟机的事<br>写明白adb控制安卓虚拟机的方法了<br>月底开始研究别的”黑科技”<br>总之就是一直在埋头鼓捣一些”骚操作”<br>也渐渐习惯”996”的日子了<br>虽然总会有一种与当初自己的理想渐行渐远的感觉<br>但是在这过程中渐渐看清自己需要的是什么<br>也是一件令人满意的收获</p>
<p>2018年眼看着要过去了<br>不开心的事情都埋在2018年<br>开心的事情都埋在心里<br>带着愿望和期待前往2019年<br>希望2019年能有更好的成长<br>希望身边的人身体都健健康康, 诸事顺意<br>Peace!</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年11月总结]]></title>
      <url>/2018/11/30/summary_2018_11/</url>
      <content type="html"><![CDATA[<h4 id="11月的总结"><a href="#11月的总结" class="headerlink" title="11月的总结."></a>11月的总结.</h4><ul>
<li>纪念日 &amp; 加班 &amp; 项目 &amp; 焦急等待签证的我<a id="more"></a>
</li>
</ul>
<hr>
<p>12月已经过去了10天<br>脑子才渐渐有空回想11月过去的事<br>还好记忆还在<br>坚持写总结还是件比较不容易的事</p>
<p>先从生活上说说吧因为没啥好说的<br>每天都比较规律<br>想说点啥也只能和吃饭购物上说了<br>双十一一毛钱没花感觉已经是一个突破了<br>毕竟想买的东西都买不起<br>双十一过去就到了黑五<br>看了一看想买的东西结果还是没买<br>电子产品还不如国内双十一打折拼券便宜<br>说说体重真是个伤感的话题<br>体重倒是在月头掉了5斤月底好像又反弹了<br>纪念日去四季MO分别搓了顿下午茶和半自助，<br>虽然有点儿那么不便宜不过还是值得的<br>明年去哪儿呢？🤔</p>
<p>说说工作或者说说自己除了生活的吧<br>先说说自己<br>2018年也还有不到1个月就结束了<br>年头立下的flag<br>年头set下的target<br>完成的情况还是比较不容乐观的<br>虽然都有进度但是完成度嘛就不提了<br>自己的项目过去一年了<br>进展相当缓慢直到最近又重新拿起来重构<br>大概月中吧一次意外的idea激起写blog的冲动<br>电光火石地在一周内又拾起了时序数据分析<br>并完成了两篇博客<br>在月底左右打算自己干点有意义的事情<br>哪怕不是对其他人有意义<br>能够让自己觉得有存在的价值就足够了<br>想起自己曾经在电脑桌面上贴的两个标签<br>想念那种一个一个划掉的感觉<br>想找回许久之前的成就感<br>工作上嘛<br>发生了一些事<br>不能说好也不能说不好<br>只能说是一种人生的经历或者经验吧<br>强度也上去了压力相对的也大了<br>996已经变成了常态<br>节奏也慢慢开始加快了<br>渐渐地开始对这种节奏已经麻木了<br>渐渐地习惯了也就那样<br>除了回到家少许的空闲时间<br>其他时间不是睡觉就是在通勤和上班<br>说实话留个自己的时间并不多<br>是时候打算挪个窝了</p>
<p>眼看12月就要来了<br>还有一个月2018年就结束了<br>期待12月我的签证能够下来<br>期待着我的德国之旅<br>也期待着2019年<br>Go,Go,Go!</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年10月总结]]></title>
      <url>/2018/10/31/summary_2018_10/</url>
      <content type="html"><![CDATA[<h4 id="10月的总结"><a href="#10月的总结" class="headerlink" title="10月的总结."></a>10月的总结.</h4><ul>
<li>PyCon &amp; 疲惫的身躯<a id="more"></a>
</li>
</ul>
<hr>
<p>10月的最后一天也总算是闲下来了，可以好好总结总结了<br>远离喧嚣的夜晚还是很能够让人静下心来想点东西<br>看回8月的总结，突然想起9月的总结走丢了</p>
<p>10初，时隔十几年再一次去了北京<br>停留的时间只有短短的十几个小时<br>虽然脑海里已经没有对前一次去北京印象了<br>但是依旧能够感受到北京那特有的人文气息<br>旅途中第一次体验到动卧<br>虽然动卧体验评价倾向于给差评<br>但是整躺旅途下来并没有给我带来太多疲惫感</p>
<p>千里迢迢去北京就是为了参加PyCon大会<br>也是第一次参加这种大型的技术分享峰会<br>会议上能够了解的东西毕竟还是有限<br>除了因为分会场的原因，分身乏术<br>其次还是自己的水平有差距<br>干货太多消化能力有限哇<br>之后还得努力哇<br>Keep hard working </p>
<p>满打满算11月也算是出来工作的第三个月了<br>眼看着项目第一版就要交付了<br>心里还是有种小小的满足感<br>虽然过程中遇到各种大大小小的问题<br>但是也都一步一步的解决了<br>坑踩着踩着就平了<br>第一版的结束也就意味着第二版的到来<br>10月底也算是一个分水岭吧<br>第二版加油＾０＾~</p>
<p>三个月了，渐渐地也习惯这种生活节奏<br>早出晚归已是常态，三餐节奏还是正常<br>炒粉外卖下午茶星巴克变成一天的饮食来源<br>习惯了早上挤地铁那种“压缩气罐”的体感<br>也习惯了晚上回去在地铁上看书的感觉<br>周五周末也成为了广深线的常客<br>这一切也算是当初出走广州的“代价”<br>路是自己选的，再苦再累还是得自己走下去</p>
<p>睡一觉起来就是11月了<br>是时候该清理清理<br>年初或者年中给自己set的target和flag了<br>也是时候开始盘算着年底的假期了</p>
<p>11月再见</p>
<p>写于2018年10月31日晚</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年8月总结]]></title>
      <url>/2018/08/31/summary_2018_8/</url>
      <content type="html"><![CDATA[<h4 id="8月的总结"><a href="#8月的总结" class="headerlink" title="8月的总结."></a>8月的总结.</h4><ul>
<li>出门远游 &amp; 正式工作的第一个月<a id="more"></a>
</li>
</ul>
<hr>
<p>终于难得有时间可以静下心来写写自己的总结<br>这个8月经历了太多</p>
<p>上过最长时间的班<br>试过加班错过末班车<br>尝试了一些新的东西<br>强迫自己学习了很多<br>休过最长时间的假<br>也感受过人的虚伪和无情</p>
<p>加班带来的东西除了累还有就是那份满足感<br>看着自己做的东西一天一天的成型<br>一步一步的尝试<br>一步一步的在脑子反复思考<br>再累也值得<br>一份满足一份成就，足矣</p>
<p>旅途除了带来奔波的劳累感但是景色能够弥补<br>虽然旅途中有些小的意外发生<br>但旅途也能带来一些意外惊喜<br>期待着下一次的假期</p>
<p>人情世故说多了显得很naive<br>很多事情自己明白就好<br>也算是成长的一堂课<br>上明白了领悟了才算是成长</p>
<p>8月感受过和看过的，太多太多<br>有自己的想法有自己的总结<br>9月又是全新的一个月<br>希望自己能够过的好一些<br>专注当下，脚踏实地<br>Own and respect your value.<br>Never settle for less than you deserve or desire.<br>Always ask for more than feels comfortable.</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy-Kafka Demo]]></title>
      <url>/2018/02/07/Scrapy_kafka/</url>
      <content type="html"><![CDATA[<h4 id="Scrapy-amp-Kafka的一个Demo"><a href="#Scrapy-amp-Kafka的一个Demo" class="headerlink" title="Scrapy &amp; Kafka的一个Demo."></a>Scrapy &amp; Kafka的一个Demo.</h4><ul>
<li>实现Scrapy通过kafka producer发送数据给consumer消费.<a id="more"></a>
</li>
</ul>
<hr>
<ul>
<li>英文介绍（English）<br>English README.md <a href="https://github.com/sunhailin-Leo/Scrapy-Kafka-Demo/blob/master/README_en.md" target="_blank" rel="noopener">Here</a></li>
</ul>
<hr>
<h3 id="Start">开头说两句</h3>

<ul>
<li>使用中有什么问题的可以给我提issue，或者直接私聊我</li>
<li>Email: 379978424@qq.com</li>
<li>QQ: 379978424</li>
</ul>
<hr>
<h3 id="Ready">准备工作</h3>

<ul>
<li>Zookeeper环境（zookeeper-3.4.10） -&gt; 具体安装下面讲 <a href="#ZookeeperInstall">安装步骤</a></li>
<li>Kafka环境（kafka-1.0.0） -&gt; 具体安装下面讲 <a href="#KafkaInstall">安装步骤</a></li>
<li>系统环境（Win10 x64）</li>
<li>Python环境（Python 3.4.4）</li>
</ul>
<hr>
<h3 id="Env">环境依赖</h3>

<ul>
<li>环境<ul>
<li>Python3.4.4（Python2暂未测试,如果有测试过的给我提下issue）</li>
</ul>
</li>
<li>依赖包<ul>
<li>Scrapy</li>
<li>pykafka</li>
</ul>
</li>
<li>安装方式:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows: pip install requirements.txt</span><br><span class="line">linux: pip3 install requiremnets.txt</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Structure">项目结构</h3>

<ul>
<li>consumer — pykafka的消费者模块（测试接收以及之后接收爬虫数据）</li>
<li>producer — pykafka的生产者模块（测试发送）</li>
<li>scrapy_kafka — Scrapy + pykafka的爬虫（爬的是我学校的官网的所有a标签链接）</li>
</ul>
<hr>
<h3 id="attention">需要注意的地方</h3>

<ul>
<li>爬虫部分我就不说了，我就挑特别的地方</li>
</ul>
<ol>
<li>kafka需要bytes数据,所以在pipeline接收到数据之后一定要encode;encode里面的encoding和消费者的decode编码要一致.</li>
<li>pipeline里面实现一个方法 close_spider(self, spider) 用来关闭producer;不然Scrapy会一直挂在producer那里不动. </li>
<li>我在pipeline里面判断了KAFKA_IP_PORT这个配置写的参数:<ul>
<li>单机部署可以用list或者str表示.</li>
<li>伪分布或者全分布可以用list,或者用逗号隔开都可以.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="ZookeeperInstall">Zookeeper安装</h3>

<ul>
<li>我大致说下Zookeeper的安装过程(以下都是单点测试, 伪分布和全分布还请各位完整学习完后再搭建)</li>
</ul>
<ol>
<li>下载zookeeper.<a href="https://www.apache.org/dyn/closer.cgi/zookeeper/" target="_blank" rel="noopener">下载地址</a></li>
<li>解压在conf\下把zoo_sample.cfg 复制为zoo.cfg</li>
<li>在系统环境变量中创建ZOOKEEPER_HOME值为zookeeper的Home目录</li>
<li>在PATH中添加zookeeper的bin目录.</li>
<li>在cmd中运行 zkServer</li>
</ol>
<hr>
<h3 id="KafkaInstall">Kafka安装</h3>

<ul>
<li>也一样是单点</li>
</ul>
<ol>
<li>下载kafka并解压.<a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">下载地址</a></li>
<li>进入解压后的文件夹, 在conf下修改server.properties文件中log.dirs指定log目录</li>
<li>配置系统环境变量KAFKA_HOME</li>
<li>在PATH中添加kafka bin/windows的目录（linux的不用理windows那个文件夹）</li>
<li>启动kafka: kafka-server-start <kafka目录下config里面的server.properties的路径></kafka目录下config里面的server.properties的路径></li>
</ol>
<ul>
<li>关于kafka的测试</li>
</ul>
<ol>
<li>创建topic：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics --create --topic newtest --partitions 1 --replication-factor 1 --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>
<ul>
<li>意思是：创建一个topic; 名字：newtest; 分区：1个; 副本数：1个; zookeeper的监听地址(由于是单点且若未修改zoo.cfg, 则zookeeper默认在2181端口上运行)</li>
</ul>
<ol>
<li>创建producer:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer --broker-list localhost:9092 --topic newtest</span><br></pre></td></tr></table></figure>
<ul>
<li>此时窗口会到达等待输入的状态，先别关闭也不着急输入。启动consumer先。</li>
</ul>
<ol>
<li>创建consumer</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer  --zookeeper localhost:2181 --topic newtest</span><br></pre></td></tr></table></figure>
<ul>
<li>当consumer创建成功后，回到producer的窗口输入一些字符什么的，看看consumer有没有出现(注：中文有可能是乱码,但不影响测试)</li>
</ul>
<ol>
<li>其他操作就请各位去参见kafka的官方文档或者系统学习后看看命令行的使用。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Scrapy </tag>
            
            <tag> Kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sanic 微信公众号开发 --- 初探]]></title>
      <url>/2018/02/06/Sanic_wx_dev_demo/</url>
      <content type="html"><![CDATA[<ul>
<li>Sanic的一个Demo(like Flask)</li>
<li>第一个稍微正式点的Demo用来开发微信公众号<a id="more"></a>
</li>
</ul>
<hr>
<h3 id="Prepare">准备工作</h3>

<ul>
<li>一个linux系统或者一个mac电脑(因为Sanic不兼容Windows)</li>
<li>一个服务器(云服务器就可以了,如果是在内网的很麻烦,而且不推荐那么折腾)</li>
<li>Python3.5以上(之前版本都不支持)</li>
<li>一个公众号(个人或者企业都可以)</li>
</ul>
<hr>
<h3 id="ProEnv">项目环境</h3>

<ul>
<li>Ubuntu 17.10 (建议用16.01或者14.04的,因为太新了gcc和g++安装部分要往下降级比较麻烦)</li>
<li>Python 3.5.5 (用了3.5最新的版本)</li>
<li>编译器Pycharm最新版本</li>
</ul>
<hr>
<h3 id="ProStructure">项目结构</h3>

<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sanic_wx_project/</span><br><span class="line">|-- controller/</span><br><span class="line">|   |-- __init__.py</span><br><span class="line">|   |-- wx_controller.py</span><br><span class="line">|</span><br><span class="line">|-- utils/</span><br><span class="line">|   |-- __init__.py</span><br><span class="line">|   |-- reply_center.py</span><br><span class="line">|   |-- validate_wx_get.py</span><br><span class="line">|</span><br><span class="line">|-- README</span><br><span class="line">|-- requirements.txt</span><br><span class="line">|-- wx_backend.py</span><br></pre></td></tr></table></figure>
<ul>
<li>controller – 蓝图的实现方法</li>
<li>utils      – reply_center是回复中心, validate_wx_get是返回微信那边的GET请求,在初次校验token的时候需要使用</li>
<li>wx_backend – 启动Sanic的方法</li>
</ul>
<hr>
<h3 id="WxDev">微信公众号开发的答疑区</h3>

<p>大致申请公众号流程以及开发前的准备:</p>
<ol>
<li>申请一个公众号(初学者用个人帐号)</li>
<li>Sanic如果没有用gunicorn或者nginx做代理,那么请在启动时使用80端口(原因很简单,微信那边只认80端口)</li>
<li>准备好一个公网的服务器或者云服务器(我用阿里云的,开放80端口)</li>
<li>先写好一个get方法去返回验证token结果(代码如下)</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    校验token</span></span><br><span class="line"><span class="string">    :param request: 请求</span></span><br><span class="line"><span class="string">    :return: str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 这里改写你在微信公众平台里输入的token</span></span><br><span class="line">    token = <span class="string">'token'</span></span><br><span class="line">    <span class="comment"># 获取输入参数</span></span><br><span class="line">    data = request.args</span><br><span class="line">    signature = data.get(<span class="string">'signature'</span>, <span class="string">''</span>)</span><br><span class="line">    timestamp = data.get(<span class="string">'timestamp'</span>, <span class="string">''</span>)</span><br><span class="line">    nonce = data.get(<span class="string">'nonce'</span>, <span class="string">''</span>)</span><br><span class="line">    echostr = data.get(<span class="string">'echostr'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="comment"># 字典排序</span></span><br><span class="line">    list_1 = [token, timestamp, nonce]</span><br><span class="line">    list_1.sort()</span><br><span class="line">    s = list_1[<span class="number">0</span>] + list_1[<span class="number">1</span>] + list_1[<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># sha1加密算法</span></span><br><span class="line">    code = hashlib.sha1(s.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">    <span class="comment"># 如果是来自微信的请求，则回复echostr</span></span><br><span class="line">    <span class="keyword">if</span> code == signature:</span><br><span class="line">        <span class="keyword">return</span> echostr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br></pre></td></tr></table></figure>
<ol>
<li>公众号管理界面验证成功后点启用就ok了.接下来就是开发的过程了.</li>
<li>具体开发有什么权限的请研读接口权限(需要在登录平台后才能看)、<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">微信公众平台技术文档</a></li>
<li>以上弄完就可以认真开发调试了.</li>
</ol>
<hr>
<h3 id="Chat">小谈</h3>

<ul>
<li>我一直关注Sanic很久了,最近才有时间静下来认真看Sanic(如果之前有学习过Flask或者Flask-restful就很容易上手).</li>
<li>Django的同学就可以要花点时间去适应下Sanic的写法</li>
<li>Sanic大概花了一天的时间去看文档，然后开发这个demo只用了一个下午(demo代码就不多, so easy)</li>
<li>之后自己会在demo的基础上开发更多的功能,玩玩微信公众号的二次开发.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Sanic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows10下多版本Python安装及使用]]></title>
      <url>/2018/01/31/multi_python_configure_win/</url>
      <content type="html"><![CDATA[<hr>
<ul>
<li><p>系统版本: Windows 10 (x64)</p>
</li>
<li><p>共存版本: Python3.4.4 / Python3.6.4</p>
</li>
</ul>
<hr>
<ul>
<li><p>安装就不讲了很简单的（记得选自定义安装，选好目录）</p>
</li>
<li><p>安装之后分别配置环境变量（记得！是分别配置）</p>
</li>
<li><p>然后修改每个Python下的python.exe和pythonw.exe</p>
<ul>
<li>注：自己是python3.4和python3.6共存;所以我改成了python34.exe pythonw34.exe(3.6的那个同理)</li>
</ul>
</li>
<li><p>修改好后去CMD测试下 (python34和python36)</p>
</li>
<li><p>测试成功后，测试下pip3.4（python3.4的pip命令）…结果应该是不行的</p>
</li>
<li><p>解决办法: 这时候在CMD分别输入如下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python34 -m pip install --upgrade pip --force-reinstall</span><br><span class="line">python36 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后再测试下pip3.4 和 pip3.6</p>
</li>
<li><p>最后提醒下！以后安装东西就需要指定版本了</p>
</li>
<li><p>例如安装lxml：就是pip3.6 install lxml了 (一定要切记!)</p>
</li>
</ul>
<hr>
<ul>
<li>用过Pycharm的同学请注意：</li>
</ul>
<ol>
<li><p>之前有用Pycharm写过项目的记得去Pycharm的Python解释器修改下路径就ok了~</p>
</li>
<li><p>新建项目默认是最新版本的解释器,如果需要切换的记得调整下Project Intercepter.</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多版本共存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里云配置Gitlab]]></title>
      <url>/2018/01/30/Aliyun_Gitlab_configure/</url>
      <content type="html"><![CDATA[<p>Gitlab服务端的配置<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1517464994746&amp;di=a27b7f2ce6dfe8da7b7abb16afa7649f&amp;imgtype=0&amp;src=http%3A%2F%2Fblog.devzeng.com%2Fimages%2Fgitlab_usage%2Flogo.png" alt="Gitlab"></p>
<a id="more"></a>
<p>以下操作均在CentOS 7.4上进行操作。</p>
<p>CentOS可以参照，其他操作系统自行百度或查看官方文档。</p>
<hr>
<h3 id="Install">主体安装部分</h3>

<ol>
<li>第一步</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab-ce.repo</span><br></pre></td></tr></table></figure>
<ul>
<li>写入一下内容：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6</span><br><span class="line">Repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">Enabled=1</span><br><span class="line">Gpgkey=https://packages.gitlab.com/gpg.key</span><br></pre></td></tr></table></figure>
<ul>
<li>保存退出</li>
</ul>
<ol>
<li>让yum源生效</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>
<ol>
<li>安装gitlab(以下命令选一个就好)</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gitlab-ce        #自动安装最新版</span><br><span class="line">sudo yum install gitlab-ce-x.x.x    #安装指定版本</span><br></pre></td></tr></table></figure>
<ol>
<li>安装完之后执行一次（过程有点漫长，可以泡个茶回来）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<ol>
<li>第四步没有出错以后就可以开始启动了</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure>
<ol>
<li>打开浏览器输入ip地址（如果不行就 <a href="http://IP地址:80）" target="_blank" rel="noopener">http://IP地址:80）</a></li>
</ol>
<ul>
<li>见到登陆界面后 gitlab-10.0 会让你直接写新密码的</li>
<li>百度好多教程说有原始密码:(原始用户名和密码为 root 和 5iveL!fe)</li>
<li>设置好后就可以玩下拉~（如果想汉化的继续往下看）</li>
</ul>
<hr>
<h3 id="InstallGit">安装Git</h3>

<ol>
<li>安装Git</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="zh-Hans">汉化</h3>

<ol>
<li>git克隆汉化包(有点大，慢慢等把，200多MB)</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/gitlab_zh_Hans</span><br><span class="line">cd /home/gitlab_zh_Hans</span><br><span class="line">git clone https://gitlab.com/xhang/gitlab.git</span><br></pre></td></tr></table></figure>
<ol>
<li>克隆好后先停止gitlab的运行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop</span><br></pre></td></tr></table></figure>
<ol>
<li>停止完后</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/gitlab_zh_Hans/*  /opt/gitlab/embedded/service/gitlab-rails/ -rf</span><br></pre></td></tr></table></figure>
<ul>
<li>这里会一直提示overwrite的..用一个shell命令的技巧</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\cp /home/gitlab_zh_Hans/*  /opt/gitlab/embedded/service/gitlab-rails/ -rf</span><br></pre></td></tr></table></figure>
<ul>
<li>给cp命令前面加个反斜杠，意义就是：输入\cp命令，作用是取消cp的别名。</li>
</ul>
<ol>
<li>复制完后会有两个warning，手动忽略，然后重启gitlab</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<ol>
<li>去访问吧~</li>
</ol>
<hr>
<h3 id="PortConfigure">端口配置</h3>

<ul>
<li>端口配置很简单</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/opt/gitlab/nginx/conf</span><br><span class="line">vim gitlab-http.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>打开conf文件后找到如下区域:</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">upstream gitlab-workhorse &#123;</span><br><span class="line">  server unix:/var/opt/gitlab/gitlab-workhorse/socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen *:80; --修改端口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server_name localhost;</span><br><span class="line">  server_tokens off; ## Don't show the nginx version number, a security best practice</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li><p>修改listen的值，改成你想要的端口</p>
</li>
<li><p>保存关闭，然后重启gitlab</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="CommonCommand">常用命令</h3>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start    # 启动所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl stop        # 停止所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl restart        # 重启所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl status        # 查看服务状态；</span><br><span class="line">sudo gitlab-ctl reconfigure        # 启动服务；</span><br><span class="line">sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；</span><br><span class="line">gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；</span><br><span class="line">sudo gitlab-ctl tail        # 查看日志；</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 阿里云 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gitlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello 2018]]></title>
      <url>/2018/01/01/Hello_2018/</url>
      <content type="html"><![CDATA[<hr>
<p><img src="https://s1.ax1x.com/2018/01/28/pvHzex.jpg" alt="Hello2018"></p>
<h1 id="2018年工作计划"><a href="#2018年工作计划" class="headerlink" title="2018年工作计划:"></a>2018年工作计划:</h1><a id="more"></a>
<ul>
<li><p>工作:</p>
<ul>
<li>上半年完成我的”南漂”梦,也同时结束我在明动软件的4个月实习.</li>
<li>还有就是完成服务外包大赛的项目. 我想去无锡嘛!</li>
</ul>
</li>
<li><p>学习    </p>
<ul>
<li>在代码方面继续完善我的Python功底,然后开始走上机器学习和大数据的道路.</li>
<li>要学的东西太多太多:<ul>
<li>机器学习巴拉巴拉算法</li>
<li>PySpark、PyKafka等等</li>
</ul>
</li>
<li>我Github中所维护的巴拉巴拉项目,都只做了一半:<ul>
<li>目前的项目:<ul>
<li>国家数据网(80%)</li>
<li>拉勾网爬虫(60%)</li>
<li>支付宝(原来80%,现在变成40%)</li>
<li>Windows/Linux的监控(70%)</li>
<li>图书馆数据分析及可视化(90%)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>爱情:</p>
<ul>
<li>好好计划毕业游去的地方</li>
<li>好好准备3月11日老婆的生日</li>
<li>每天都那么爱我的老婆猪猪</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 风景 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 风景 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年的总结]]></title>
      <url>/2017/12/31/summary_2017/</url>
      <content type="html"><![CDATA[<hr>
<h1 id="2017年的总结"><a href="#2017年的总结" class="headerlink" title="2017年的总结"></a>2017年的总结</h1><p>年底了，事情也比较多，还要回忆过去一年发生的那么多的事情<br><a id="more"></a></p>
<h3 id="Start">开头</h3>

<ul>
<li>大致分成三个阶段吧 学校 -&gt; 实习1 -&gt; 实习2</li>
<li>2017年也是人生的一个转折吧。从学校到实习，过程虽说感觉有点漫长但是到了年底回过头去看还是过的挺快的。</li>
<li>搞技术的还是要脚踏实地吧，不然怎么找到好（chui）工（niu）作（pi）呢？</li>
</ul>
<h3 id="First">第一部分</h3>

<p><strong>2017.01 - 2017.02</strong> 这段时间没记错的话开始鼓捣爬虫和搞起了大数据【玩起了Hadoop和Spark】，主线还是在爬虫上</p>
<p><strong>2017.02 - 2017.04</strong> 这段时间穿插着在上雅思。考雅思当时为了考飞行员（虽然最后挂在体检上，也是难受）；后来就想到出国考研了，毕竟梦想破灭了一个还得找另外一个替代（新加坡南洋理工大学）</p>
<p><strong>2017.02.02 - 2017.02.15</strong> 依稀记得这段时间在爬维基百科的历史上的今天（也不知道抽了哪根筋想分析哪天发生的历史事件最多）</p>
<p><strong>2017.02.24 - 2017.02.25</strong> 和老婆猪去了深圳和香港，第一次吃豚王和一兰拉面。也是第一次和老婆猪出远门旅行。</p>
<p><strong>2017.03.04 - 2017.04</strong> 这段时间在研究矩阵降维（主要还是去理解SVD；后来借了本矩阵分析与应用和子空间降维算法研究与应用，虽然看的很懵逼，但是能够开阔思路）</p>
<p><strong>2017.03.11</strong> 帮老婆猪过了第十九个破蛋日</p>
<p><strong>2017.03.01 - 2017.03.25</strong> 这段时间在研究Ambari这个神奇的部署框架。虽然比不上CDH火，但是我感觉虽然配置麻烦了点，但是整体的使用还是ok的。</p>
<p><strong>2017.04.12</strong> 这一天终于狠下心入手了LG 29寸的曲面显示屏（讲真真的爽，之后敲代码的日子真心畅快!）</p>
<p><strong>2017.04 - 2017.05</strong> 这段时间貌似一直在酱油弄SpringBoot和HDFS的二次开发。这段时间学的东西真心多，就光HDFS的原理和API的使用我就消化了好一段时间，虽然最后这个WebHDFS还是比较坑爹的，bug太多了，但是对HDFS还是有个较完整的认知。</p>
<p><strong>2017.05 - 2017.06</strong> 因为学校开了数据挖掘这门课，便开始回归数据分析了。死磕numpy、pandas、sklearn和真心不好用的matplotlib</p>
<p><strong>2017.06 - 2017.07</strong> 大三下交完了课程设计答完辩也选完了毕业设计的导师之后，便盘算起实习了。这之前还跟我的前端小伙伴一直在做码猿博客，虽然过程有点崎岖，但是结果还是ok的，学到了很多：SpringBoot、Spring Security、SpringJPA等等，还有一个CSDN的爬虫哈哈~</p>
<h3 id="Second">第二部分</h3>

<p><strong>2017.06.23 - 2017.07.11</strong> 面试了几个公司印象比较深的就是触电传媒和后面去实习的浩瀚汇通。</p>
<ul>
<li>触电传媒是广东电视台的，也是我人生第一次走进广东电视台办公区哈哈，感觉就是不一样，虽然最后没有面试成功，当时面试的是爬虫工程师（主要的缺陷还是在爬虫通用性和解决反爬的问题层面）</li>
<li>浩瀚汇通这一个，当时面的是研发实习生，面试的时候也说明白了实际上是做ETL的事情（后来跑偏了…），当时面试问的几个SQL也是有点懵圈的，毕竟当时自己的在MySQL的应用不多，太依赖NoSQL了。后来想着没戏了，结果本来要和老大面试的，但是老大要开会就没面了（老大来头不小，这里就不多说了哈哈）。然后就这样稀里糊涂的进了公司开始了三个月的实习生活（后来才知道我是唯一一个实习生，也是因为HR的努力工作早早的就发了通知给我通知我上班，不然晚发几个小时，估计就凉了）</li>
</ul>
<p><strong>2017.07.12 - 2017.10.09</strong> 第一份实习（满打满算三个月）</p>
<ul>
<li>这段时间接触的东西很多，先讲讲大致过程：<ul>
<li>Hive的应用了解，上来虽然看了Hive语句的语法也应用了，但是主要是在于Hive UDF、UDTF的开发上了，写了两个jar包清洗数据。也算头一回在2个礼拜之内弄懂Hadoop生态圈的一个组件（除了Hive的分桶和分区，其他都弄通了）</li>
<li>后来的一段时间开始写起了Scala，起因是因为Spark对于Scala的处理效率比Java来的更快，毕竟数据量大了。后来将我mentor的java代码转成了scala，打包成Jar包也跑在了服务器上。</li>
<li>再后来公司经历过一场数据迁移后，我的mentor叫我去编译Spark和Hadoop。Spark主要是解决CDH后来的版本SparkSQL对于Hive的不支持（最后怎么编译都编不过去，后来在一个国外论坛找到了相似的情况，但是没解决方案）；Hadoop的话主要是加入了Snappy和另外一个压缩算法，主要是处理HDFS文件占用的问题。</li>
<li>最后一段也是有点不开心的，后面来了一个搞爬虫的，我的mentor便让我去跟他一起搞爬虫（然而是Go爬虫并不是Python爬虫，原地哭泣…）。这段时间分开说:<ul>
<li>这段Go爬虫的时间主要不爽的是在于，Go这玩意真的在windows上搞很有毒，经常奇奇葩葩的报错，写代码60%的时间在解决一些不是代码逻辑的问题。最重要的还是带我搞爬虫的问他怎么解决这些Go的问题，每次都说我用的是mac，你用的是windows，你自己百度百度…（无话可说）</li>
<li>也是因为之前的一些奇葩的问题，搞得我对Go这门语言是非常的痛恨，虽然说是一门服务器语言，执行速度真的快，但是在这过程也是正由于带我弄爬虫的影响了我对Go语言的看法。</li>
</ul>
</li>
<li>在最后弄爬虫平台前端页面的时候也开始接触了Vue和Element-ui，于似乎我后面所有带页面的全栈项目几乎都是用的Element-ui。</li>
<li>在9月底最后一个工作就是弄支付宝爬虫，然而奇葩的是直到我现在都不明白当时他用Go写的支付宝爬虫为啥要把图片转成Base64然后再要我去复制Base64还原成图片去登陆。最后的那一个礼拜我遍开始用Python做起了我目前主要在维护的Alipay-Spider项目了（参见我的Github；起初不是用Scrapy的，后来改的）</li>
</ul>
</li>
<li>学到的东西还是很多的：<ul>
<li>Hive的应用、Scala和Go爬虫的入门（虽然现在忘得差不多了）、Spark和Hadoop的编译方式</li>
<li>公司其实时不时就有一个技术分享会什么的，其实虽然听的很懵圈，但是学到不少东西：HBase的基本架构、Azkaban的应用场景讲解、一些机器学习的分享会等等</li>
<li>其实还了解到一些业务层面的上的东西，例如风控；这样东西现在开始吸引我学习的兴趣了，感觉很神奇，打开了一道知识的大门（哈哈）</li>
</ul>
</li>
</ul>
<p><strong>2017.10.13 - 2017.10.14</strong> 参加了DoraHacks的hackthon。其实也是机缘巧合，正好我在上一家公司最后写的爬虫和题目撞上了，是关于支付宝用户画像，正好需要爬虫。当时的支付宝还是比较友善的，用户名密码登陆是完全ojbk的，当时也做了小的分析，熬了一整个通宵把爬虫完善了，把初步分析的代码完善了，也算是对接上了前端页面，也是人生头一回敲一个通宵的代码（完全没停过，不知道喝了几罐的雪碧可乐…）。虽然第二天早上演示的时候出现了Bug，但是总的来讲还是完成了任务；虽然没获奖什么的哈哈，但是头一回参加这种头脑风暴还是长进了不少。在此也希望有小伙伴对爬虫或者其他和技术有关的跟我组队参加2018年的Dorahacks吧~。</p>
<h3 id="Third">第三部分</h3>

<p><strong>2017.10.26</strong> 这一天是我入职明动软件的第一天，职位是数据分析师。上班的地点离我家就一个地铁站的距离，20分钟就能到公司。</p>
<p><strong>2017.10.26 - 2017.12.31</strong> 第二份实习：</p>
<ul>
<li>这段时间刚进公司，任务还是有点重的，但是比较对上胃口，能学到东西：<ul>
<li>爬虫：爬取了广州市政府公开数据，将原先同事需要跑一天多的爬虫，用Scrapy优化到只要1/4天的时间，而且还加入的页面监控和接口查询状态【Scrapy + Flask + Vue-ElementUI】</li>
<li>数据分析：在接触环保大数据之后开始的第一个任务就是预测污染排放量（一个时间序列的预测）。在做的过程中，发现了sklearn在这一方面的缺陷，在运用中发现statsmodels这个统计学的库在ARMA这个模型的代码是有问题的，后来改了下源码就好了；但是再后来发现<a href="https://github.com/RJT1990/pyflux" target="_blank" rel="noopener">pyflux</a>这个库，简直神器，有兴趣的真的要去好好看看这个专门做时间序列分析的库，github点赞超过了1000。</li>
<li>后面还是就是数据可视化了…苦苦的在matplotlib上挣扎了好一段时间，后来发现pyecharts这个神器，也很荣幸帮助作者改了几个bug，也提了几个issue，虽然还没能力提PR但是，也看着pyecharts越来越好用。</li>
</ul>
</li>
</ul>
<p><strong>2017.11 - 2017.12</strong> 这段时间还有在忙的就是毕业设计的初步框架、广商图书馆的数据分析（Flask + pyecharts + Vue-ElementUI）以及广商图书馆和广州图书馆的爬虫.</p>
<h3 id="Final">总结一下</h3>

<p>2017年经历了很多也学习到了很多，毕竟也是人生的一个转折点，希望2018能更加的好。</p>
<p>罗列下我的技术栈吧：</p>
<ul>
<li>爬虫（Scrapy是一个重点）</li>
<li>数据分析（pandas、sklearn、pyflux、pyecharts）</li>
<li>Hadoop和Spark</li>
<li>Hive（UDF、UDTF和Hive语句）</li>
<li>MySQL的进一步学习</li>
<li>Vue的基础（主要是从Element-UI入手的，慢慢了解模块化的意义）</li>
<li>自己的Github的开源项目（主要还是在支付宝爬虫【死磕到底】）</li>
</ul>
<p>最后希望自己在2018年能够学习到更多知识，不断完善好自己的开源项目获得更多的stars~<br>我的github地址： <a href="https://github.com/sunhailin-Leo" target="_blank" rel="noopener">Github for sunhailin-Leo</a></p>
]]></content>
      
        <categories>
            
            <category> Summary </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2017 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pandas Pivot_table和Groupby]]></title>
      <url>/2017/12/29/PythonPandasPivot_table/</url>
      <content type="html"><![CDATA[<hr>
<p>Pandas透视表和Groupby<br>个人感觉是就是一个高级版的groupby,可以传入agg函数,比groupby聚合后调用的几种函数来的更高级.<br><a id="more"></a></p>
<hr>
<p>数据如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">C:\Python34\python.exe C:/Users/Leo/Desktop/MingDong_Work/Work_3/business_statAna/electricity_analyse.py</span><br><span class="line">              PSCode   Month  DATATYPE  ProcElectricity  LifeElectricity</span><br><span class="line"><span class="number">0</span>       <span class="number">440100000004</span>  <span class="number">201510</span>         <span class="number">3</span>           <span class="number">7.4555</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">1</span>       <span class="number">440100000004</span>  <span class="number">201510</span>         <span class="number">5</span>           <span class="number">8.0744</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">2</span>       <span class="number">440100000004</span>  <span class="number">201512</span>         <span class="number">5</span>           <span class="number">8.0984</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">3</span>       <span class="number">440100000004</span>  <span class="number">201601</span>         <span class="number">4</span>          <span class="number">20.4855</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">4</span>       <span class="number">440100000004</span>  <span class="number">201604</span>         <span class="number">4</span>          <span class="number">20.4855</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">5</span>       <span class="number">440100000004</span>  <span class="number">201607</span>         <span class="number">4</span>          <span class="number">27.4033</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">6</span>       <span class="number">440100000004</span>  <span class="number">201610</span>         <span class="number">5</span>          <span class="number">22.8613</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">7</span>       <span class="number">440100000004</span>  <span class="number">201701</span>         <span class="number">5</span>           <span class="number">0.0000</span>           <span class="number">7.9799</span></span><br><span class="line"><span class="number">8</span>       <span class="number">440100000004</span>  <span class="number">201704</span>         <span class="number">5</span>           <span class="number">0.0000</span>           <span class="number">5.2596</span></span><br><span class="line"><span class="number">9</span>       <span class="number">440100000028</span>  <span class="number">201501</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">10</span>      <span class="number">440100000028</span>  <span class="number">201508</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">11</span>      <span class="number">440100000028</span>  <span class="number">201509</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">12</span>      <span class="number">440100000028</span>  <span class="number">201704</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">13</span>      <span class="number">440100000028</span>  <span class="number">201705</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">14</span>      <span class="number">440100000028</span>  <span class="number">201706</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">15</span>      <span class="number">440100000028</span>  <span class="number">201707</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">16</span>      <span class="number">440100000028</span>  <span class="number">201708</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">17</span>      <span class="number">440100000028</span>  <span class="number">201709</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">18</span>      <span class="number">440100000028</span>  <span class="number">201710</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">19</span>      <span class="number">440100000071</span>  <span class="number">201510</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">20</span>      <span class="number">440100000071</span>  <span class="number">201601</span>         <span class="number">3</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">21</span>      <span class="number">440100000075</span>  <span class="number">201510</span>         <span class="number">5</span>          <span class="number">15.4600</span>           <span class="number">4.9200</span></span><br><span class="line"><span class="number">22</span>      <span class="number">440100000075</span>  <span class="number">201601</span>         <span class="number">4</span>           <span class="number">8.1900</span>           <span class="number">4.0500</span></span><br><span class="line"><span class="number">23</span>      <span class="number">440100000075</span>  <span class="number">201604</span>         <span class="number">2</span>          <span class="number">16.9000</span>           <span class="number">4.6600</span></span><br><span class="line"><span class="number">24</span>      <span class="number">440100000075</span>  <span class="number">201604</span>         <span class="number">4</span>           <span class="number">8.1900</span>           <span class="number">4.0500</span></span><br><span class="line"><span class="number">25</span>      <span class="number">440100000075</span>  <span class="number">201607</span>         <span class="number">4</span>          <span class="number">26.5600</span>           <span class="number">6.1500</span></span><br><span class="line"><span class="number">26</span>      <span class="number">440100000075</span>  <span class="number">201610</span>         <span class="number">5</span>          <span class="number">18.4600</span>           <span class="number">6.3200</span></span><br><span class="line"><span class="number">27</span>      <span class="number">440100000075</span>  <span class="number">201701</span>         <span class="number">2</span>           <span class="number">8.0800</span>           <span class="number">2.9900</span></span><br><span class="line"><span class="number">28</span>      <span class="number">440100000075</span>  <span class="number">201704</span>         <span class="number">5</span>           <span class="number">9.2700</span>           <span class="number">2.4700</span></span><br><span class="line"><span class="number">29</span>      <span class="number">440100000075</span>  <span class="number">201707</span>         <span class="number">5</span>          <span class="number">20.0100</span>           <span class="number">3.9000</span></span><br><span class="line"><span class="meta">... </span>             ...     ...       ...              ...              ...</span><br><span class="line"><span class="number">107599</span>  <span class="number">449013000184</span>  <span class="number">201709</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107600</span>  <span class="number">449013000188</span>  <span class="number">201707</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107601</span>  <span class="number">449013000188</span>  <span class="number">201708</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107602</span>  <span class="number">449013000188</span>  <span class="number">201709</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107603</span>  <span class="number">449014000001</span>  <span class="number">201501</span>         <span class="number">3</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107604</span>  <span class="number">449014000006</span>  <span class="number">201507</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107605</span>  <span class="number">449014000050</span>  <span class="number">201601</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107606</span>  <span class="number">449016000002</span>  <span class="number">201601</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107607</span>  <span class="number">449016000002</span>  <span class="number">201604</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107608</span>  <span class="number">449016000002</span>  <span class="number">201607</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107609</span>  <span class="number">449016000002</span>  <span class="number">201701</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107610</span>  <span class="number">449016000004</span>  <span class="number">201601</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107611</span>  <span class="number">449016000004</span>  <span class="number">201604</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107612</span>  <span class="number">449016000004</span>  <span class="number">201607</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107613</span>  <span class="number">449016000004</span>  <span class="number">201610</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107614</span>  <span class="number">449016000004</span>  <span class="number">201701</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107615</span>  <span class="number">449016000012</span>  <span class="number">201601</span>         <span class="number">1</span>        <span class="number">1666.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107616</span>  <span class="number">449016000013</span>  <span class="number">201601</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107617</span>  <span class="number">449016000013</span>  <span class="number">201604</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107618</span>  <span class="number">449016000013</span>  <span class="number">201607</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107619</span>  <span class="number">449016000013</span>  <span class="number">201701</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107620</span>  <span class="number">449016000026</span>  <span class="number">201601</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107621</span>  <span class="number">449016000026</span>  <span class="number">201604</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107622</span>  <span class="number">449016000026</span>  <span class="number">201607</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107623</span>  <span class="number">449016000026</span>  <span class="number">201610</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107624</span>  <span class="number">449016000038</span>  <span class="number">201701</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107625</span>  <span class="number">449016000038</span>  <span class="number">201704</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107626</span>  <span class="number">449016000062</span>  <span class="number">201701</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107627</span>  <span class="number">449016000062</span>  <span class="number">201704</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"><span class="number">107628</span>  <span class="number">449016000094</span>  <span class="number">201707</span>         <span class="number">1</span>           <span class="number">0.0000</span>           <span class="number">0.0000</span></span><br><span class="line"></span><br><span class="line">[<span class="number">107629</span> rows x <span class="number">5</span> columns]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>解释：</p>
<ul>
<li>细看一下数据会发现存在一些PSCode和DataMonth一样的数据但是数值和DATATYPE都不同,但是统计的时候又不能舍弃其他类型的,因此采用最大值填充</li>
</ul>
<p>解决办法:</p>
<ul>
<li>想到思路以后脑子里就蹦出了groupby(代码如下)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_group_result = self.total_df.groupby([<span class="string">'PSCode'</span>, <span class="string">'Month'</span>]).max().reset_index()</span><br></pre></td></tr></table></figure>
<ul>
<li>同事给我的方法是透视表,于是尝试了一下(以前有groupby忽略了这个这么好用的东西)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pivot_test = pd.pivot_table(self.total_df, index=[<span class="string">'PSCode'</span>, <span class="string">'Month'</span>], values=[<span class="string">'ProcElectricity'</span>, <span class="string">'LifeElectricity'</span>], aggfunc=np.mean).reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是不知道为啥输出结果的时候把我的ProcElectricity, LifeElectricity两列数据顺序调换了.虽然无关紧要,但是还是比较奇怪的.</span></span><br></pre></td></tr></table></figure>
<p>总结:</p>
<ul>
<li>Pivot_table的注重呈现方式比groupby好,而groupby注重在分组结果而不是整体.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pandas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pandas一些小问题解决方法]]></title>
      <url>/2017/12/29/PythonPandas_1/</url>
      <content type="html"><![CDATA[<hr>
<p>Pandas一些小问题解决方法<br><a id="more"></a></p>
<hr>
<ul>
<li>一个函数中需要调用两次同一个Dataframe,而再第一次调用时需要对行列进行操作,而第二次调用需要第一次调用时操作的列(以删除为例</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 假设有userid, username, password, login_date列</span></span><br><span class="line">data = pd.Dataframe()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次调用</span></span><br><span class="line">df = data</span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'username'</span>]</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次调用</span></span><br><span class="line">df_1 = data</span><br><span class="line">print(df[<span class="string">'username'</span>])</span><br><span class="line"><span class="comment"># 这样是无法输出的,因为df和data共用同一个内存地址,即同时使用一个Dataframe,只是调用名称不同.</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法如下:</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和上面的例子为同一个</span></span><br><span class="line">data = pd.Dataframe()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次调用</span></span><br><span class="line">df = data.__deepcopy__()</span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'username'</span>]</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次调用</span></span><br><span class="line">df_1 = data</span><br><span class="line">print(df[<span class="string">'username'</span>])</span><br><span class="line"><span class="comment"># 这样子就能得到两个结果啦~</span></span><br></pre></td></tr></table></figure>
<p><strong>小结：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考链接: http://python.jobbole.com/82294/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 核心就是 __deepcopy__()方法---深拷贝(pandas)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""Pandas官方以及解释</span></span><br><span class="line"><span class="string">Make a copy of this objects data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Parameters</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">deep : boolean or string, default True</span></span><br><span class="line"><span class="string">    Make a deep copy, including a copy of the data and the indices.</span></span><br><span class="line"><span class="string">    With ``deep=False`` neither the indices or the data are copied.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note that when ``deep=True`` data is copied, actual python objects</span></span><br><span class="line"><span class="string">    will not be copied recursively, only the reference to the object.</span></span><br><span class="line"><span class="string">    This is in contrast to ``copy.deepcopy`` in the Standard Library,</span></span><br><span class="line"><span class="string">    which recursively copies object data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Returns</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">copy : type of caller</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">__deepcopy__的实际调用是调用 Dataframe.copy的对象(参数deep=<span class="keyword">True</span>)</span><br><span class="line">当使用深拷贝时,不会递归复制，只有对对象的引用。</span><br><span class="line">与此形成对比的是标准库中的``copy.deepcopy``(真正的深拷贝),递归地复制对象数据。</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pandas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之psutil库使用]]></title>
      <url>/2017/12/13/PythonPsutils/</url>
      <content type="html"><![CDATA[<hr>
<p>Python psutil库的介绍：</p>
<ul>
<li>实际上psutil就是为了监控而生的库.因为其强大在于多平台兼容(Unix, Windows下都可以使用)</li>
<li>能够监控CPU、内存、硬盘、进程等等.<a id="more"></a>
</li>
</ul>
<hr>
<h4 id="Contract">开头唠叨两句</h4>

<p>在使用中有任何问题，可以反馈给我，以下联系方式跟我交流</p>
<ul>
<li>Author: Leo</li>
<li>Wechat: Leo-sunhailin </li>
<li>QQ: 379978424</li>
<li>E-mail: 379978424@qq.com </li>
</ul>
<hr>
<h4 id="intro">介绍</h4>

<ul>
<li><p>开发介绍:</p>
<ul>
<li><p>psutil库是一个能够查看系统信息的库,可以用来做监控(运维用的最多)</p>
</li>
<li><p>psutil模块获取系统的基础信息，包括cpu、内存、磁盘io和网络io和查看系统进程信息</p>
</li>
<li><p>其中进程的方法中有psutil.Process()和psutil.Popen()两个方法。</p>
</li>
</ul>
</li>
<li><p>后期更新:</p>
<ul>
<li>加入前端页面管理(vue + element-ui)</li>
<li>Linux的代码</li>
<li>多终端查询</li>
</ul>
</li>
</ul>
<hr>
<h4 id="Env">开发环境</h4>

<ul>
<li><p>系统: Win10 x64</p>
</li>
<li><p>Python版本: 3.4.4</p>
<ul>
<li><p>psutil: 5.4.1</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install psutil</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="HowToUse">使用说明</h4>

<ul>
<li>使用方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行</span></span><br><span class="line">python &lt;你命名的py名称&gt;.py -l zh(或者是en)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l是选择语言,-h是帮助文档</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Code">代码</h4>

<ul>
<li><p>直接po代码了,目前只写了windows下的,linux的晚点在补充上来</p>
</li>
<li><p>Windows</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on 2017年11月29日</span></span><br><span class="line"><span class="string">@author: Leo</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内部库</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方库</span></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统信息查询</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemChecker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lang)</span>:</span></span><br><span class="line">        <span class="comment"># 内存字典字段</span></span><br><span class="line">        self.memory_dict_en = OrderedDict()</span><br><span class="line">        self.memory_dict_zh = OrderedDict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># CPU信息字段</span></span><br><span class="line">        self.cpu_dict_en = OrderedDict()</span><br><span class="line">        self.cpu_dict_zh = OrderedDict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用户信息</span></span><br><span class="line">        self.user_info_en = OrderedDict()</span><br><span class="line">        self.user_info_zh = OrderedDict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进程信息</span></span><br><span class="line">        self.process_info_en = OrderedDict()</span><br><span class="line">        self.process_info_zh = OrderedDict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取当前内存大小</span></span><br><span class="line">        self.memory_result = psutil.virtual_memory()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出语言</span></span><br><span class="line">        self.language = lang</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    工具方法</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 转换时间戳</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_timestamp</span><span class="params">(timestamp)</span>:</span></span><br><span class="line">        time_local = time.localtime(int(timestamp))</span><br><span class="line">        <span class="keyword">return</span> str(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time_local))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换容量单位</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bytes_2_human_readable</span><span class="params">(number_of_bytes)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        转换单位(上限是TB)</span></span><br><span class="line"><span class="string">        :param number_of_bytes:</span></span><br><span class="line"><span class="string">        :return: 返回大小 + 单位(字符串)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> number_of_bytes &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"!!! numberOfBytes can't be smaller than 0 !!!"</span>)</span><br><span class="line"></span><br><span class="line">        step_to_greater_unit = <span class="number">1024.</span></span><br><span class="line"></span><br><span class="line">        number_of_bytes = float(number_of_bytes)</span><br><span class="line">        unit = <span class="string">'bytes'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number_of_bytes / step_to_greater_unit) &gt;= <span class="number">1</span>:</span><br><span class="line">            number_of_bytes /= step_to_greater_unit</span><br><span class="line">            unit = <span class="string">'KB'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number_of_bytes / step_to_greater_unit) &gt;= <span class="number">1</span>:</span><br><span class="line">            number_of_bytes /= step_to_greater_unit</span><br><span class="line">            unit = <span class="string">'MB'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number_of_bytes / step_to_greater_unit) &gt;= <span class="number">1</span>:</span><br><span class="line">            number_of_bytes /= step_to_greater_unit</span><br><span class="line">            unit = <span class="string">'GB'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number_of_bytes / step_to_greater_unit) &gt;= <span class="number">1</span>:</span><br><span class="line">            number_of_bytes /= step_to_greater_unit</span><br><span class="line">            unit = <span class="string">'TB'</span></span><br><span class="line"></span><br><span class="line">        precision = <span class="number">1</span></span><br><span class="line">        number_of_bytes = round(number_of_bytes, precision)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str(number_of_bytes) + unit</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    核心方法</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 获取容量大小</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_memory_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">        json_data = &#123;<span class="string">"data"</span>: []&#125;</span><br><span class="line">        <span class="comment"># 总内存</span></span><br><span class="line">        self.memory_dict_en[<span class="string">'total'</span>] = \</span><br><span class="line">            self.memory_dict_zh[<span class="string">'总内存'</span>] = self.bytes_2_human_readable(self.memory_result.total)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 可用内存</span></span><br><span class="line">        self.memory_dict_en[<span class="string">'available'</span>] = \</span><br><span class="line">            self.memory_dict_zh[<span class="string">'可用内存'</span>] = self.bytes_2_human_readable(self.memory_result.available)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 百分比</span></span><br><span class="line">        self.memory_dict_en[<span class="string">'percent'</span>] = \</span><br><span class="line">            self.memory_dict_zh[<span class="string">'百分比'</span>] = str(self.memory_result.percent) + <span class="string">"%"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 已使用内存</span></span><br><span class="line">        self.memory_dict_en[<span class="string">'used'</span>] = \</span><br><span class="line">            self.memory_dict_zh[<span class="string">'已用内存'</span>] = self.bytes_2_human_readable(self.memory_result.used)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 剩余内存</span></span><br><span class="line">        self.memory_dict_en[<span class="string">'free'</span>] = \</span><br><span class="line">            self.memory_dict_zh[<span class="string">'剩余内存'</span>] = self.bytes_2_human_readable(self.memory_result.free)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.language <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> self.language == <span class="string">"zh"</span>:</span><br><span class="line">            json_data[<span class="string">'data'</span>].append(dict(self.memory_dict_zh))</span><br><span class="line">            json_data.update(dict(msg=<span class="string">"Success"</span>))</span><br><span class="line">            <span class="keyword">return</span> json.dumps(json_data, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.language == <span class="string">"en"</span>:</span><br><span class="line">            json_data[<span class="string">'data'</span>].append(dict(self.memory_dict_en))</span><br><span class="line">            json_data.update(dict(msg=<span class="string">"Success"</span>))</span><br><span class="line">            <span class="keyword">return</span> json.dumps(json_data, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Unsupported language!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取CPU信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cpu_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        json_data = &#123;<span class="string">"data"</span>: []&#125;</span><br><span class="line">        <span class="comment"># CPU核数</span></span><br><span class="line">        self.cpu_dict_en[<span class="string">'CPU Core Count'</span>] = \</span><br><span class="line">            self.cpu_dict_zh[<span class="string">'CPU核数'</span>] = str(psutil.cpu_count(logical=<span class="keyword">False</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># CPU线程数</span></span><br><span class="line">        self.cpu_dict_en[<span class="string">'CPU Thread Count'</span>] = \</span><br><span class="line">            self.cpu_dict_zh[<span class="string">'CPU线程数'</span>] = str(psutil.cpu_count())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.language <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> self.language == <span class="string">"zh"</span>:</span><br><span class="line">            json_data[<span class="string">'data'</span>].append(dict(self.cpu_dict_zh))</span><br><span class="line">            json_data.update(dict(msg=<span class="string">"Success"</span>))</span><br><span class="line">            <span class="keyword">return</span> json.dumps(json_data, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.language == <span class="string">"en"</span>:</span><br><span class="line">            json_data[<span class="string">'data'</span>].append(dict(self.cpu_dict_en))</span><br><span class="line">            json_data.update(dict(msg=<span class="string">"Success"</span>))</span><br><span class="line">            <span class="keyword">return</span> json.dumps(json_data, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Unsupported language!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取本机用户时间和启动时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_user_start_time</span><span class="params">(self)</span>:</span></span><br><span class="line">        json_data = &#123;<span class="string">"data"</span>: []&#125;</span><br><span class="line">        <span class="comment"># 当前用户名</span></span><br><span class="line">        self.user_info_en[<span class="string">'name'</span>] = \</span><br><span class="line">            self.user_info_zh[<span class="string">'用户名'</span>] = psutil.users()[<span class="number">0</span>].name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 系统启动时间</span></span><br><span class="line">        self.user_info_en[<span class="string">'system_start_time'</span>] = \</span><br><span class="line">            self.user_info_zh[<span class="string">'系统启动时间'</span>] = self.change_timestamp(psutil.users()[<span class="number">0</span>].started)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.language <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> self.language == <span class="string">"zh"</span>:</span><br><span class="line">            json_data[<span class="string">'data'</span>].append(dict(self.user_info_zh))</span><br><span class="line">            json_data.update(dict(msg=<span class="string">"Success"</span>))</span><br><span class="line">            <span class="keyword">return</span> json.dumps(json_data, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.language == <span class="string">"en"</span>:</span><br><span class="line">            json_data[<span class="string">'data'</span>].append(dict(self.user_info_en))</span><br><span class="line">            json_data.update(dict(msg=<span class="string">"Success"</span>))</span><br><span class="line">            <span class="keyword">return</span> json.dumps(json_data, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Unsupported language!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取进程信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_process_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建一个json</span></span><br><span class="line">        json_data = &#123;<span class="string">"data"</span>: []&#125;</span><br><span class="line">        <span class="keyword">for</span> pid <span class="keyword">in</span> psutil.pids():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 进程号</span></span><br><span class="line">                self.process_info_en[<span class="string">'PID'</span>] = \</span><br><span class="line">                    self.process_info_zh[<span class="string">'进程号'</span>] = pid</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 进程名</span></span><br><span class="line">                self.process_info_en[<span class="string">'Name'</span>] = \</span><br><span class="line">                    self.process_info_zh[<span class="string">'进程名'</span>] = psutil.Process(pid).name()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 进程状态</span></span><br><span class="line">                self.process_info_en[<span class="string">'Status'</span>] = \</span><br><span class="line">                    self.process_info_zh[<span class="string">'进程状态'</span>] = psutil.Process(pid).status()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 进程内存占用率</span></span><br><span class="line">                self.process_info_en[<span class="string">'Percent'</span>] = \</span><br><span class="line">                    self.process_info_zh[<span class="string">'进程内存使用率'</span>] = str(round(psutil.Process(pid).memory_percent(), <span class="number">3</span>)) + <span class="string">"%"</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 进程内存占用大小</span></span><br><span class="line">                self.process_info_en[<span class="string">'MemoryUsed'</span>] = \</span><br><span class="line">                    self.process_info_zh[<span class="string">'进程内存占用'</span>] = \</span><br><span class="line">                    self.bytes_2_human_readable((psutil.Process(pid).memory_percent() / <span class="number">100</span>) * self.memory_result.total)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 写入json数组</span></span><br><span class="line">                <span class="keyword">if</span> self.language <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> self.language == <span class="string">"zh"</span>:</span><br><span class="line">                    json_data[<span class="string">'data'</span>].append(dict(self.process_info_zh))</span><br><span class="line">                <span class="keyword">elif</span> self.language == <span class="string">"en"</span>:</span><br><span class="line">                    json_data[<span class="string">'data'</span>].append(dict(self.process_info_en))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">"Unsupported language!"</span>)</span><br><span class="line">            <span class="keyword">except</span> psutil.NoSuchProcess:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 状态</span></span><br><span class="line">        json_data.update(dict(msg=<span class="string">"Success"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回</span></span><br><span class="line">        <span class="keyword">return</span> json.dumps(json_data, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取全部信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取信息</span></span><br><span class="line">        memory_info = json.loads(self.get_memory_dict())</span><br><span class="line">        cpu_info = json.loads(self.get_cpu_info())</span><br><span class="line">        user_info = json.loads(self.get_user_start_time())</span><br><span class="line">        process_info = json.loads(self.get_process_info())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        print(<span class="string">"---\t内存使用详情(Memory used info)\t---"</span>)</span><br><span class="line">        <span class="keyword">for</span> memory_value <span class="keyword">in</span> memory_info[<span class="string">'data'</span>]:</span><br><span class="line">            print(memory_value)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"---\tCPU详情(CPU used info)\t---"</span>)</span><br><span class="line">        <span class="keyword">for</span> cpu_value <span class="keyword">in</span> cpu_info[<span class="string">'data'</span>]:</span><br><span class="line">            print(cpu_value)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"---\t本机用户详情(Computer user info)\t---"</span>)</span><br><span class="line">        <span class="keyword">for</span> user_value <span class="keyword">in</span> user_info[<span class="string">'data'</span>]:</span><br><span class="line">            print(user_value)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"---\t进程详情(Process info)\t---"</span>)</span><br><span class="line">        <span class="keyword">for</span> process <span class="keyword">in</span> process_info[<span class="string">'data'</span>]:</span><br><span class="line">            print(process)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 帮助文档</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help_center</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Options and arguments (and corresponding environment variables):"</span>)</span><br><span class="line">    print(<span class="string">"-l\t:this parameter need a language type, like zh or en.\n\t Chinese and English."</span>)</span><br><span class="line">    print(<span class="string">"-h\t:print this help message and exit (also --help)"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取参数(操作和语言类型)</span></span><br><span class="line">        options = sys.argv[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 如果参数为 -l</span></span><br><span class="line">        <span class="keyword">if</span> options[<span class="number">0</span>] == <span class="string">"-l"</span>:</span><br><span class="line">            <span class="comment"># 如果参数</span></span><br><span class="line">            language = options[<span class="number">1</span>::<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> language[<span class="number">0</span>] != <span class="string">"zh"</span> <span class="keyword">and</span> language[<span class="number">0</span>] != <span class="string">"en"</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"Language parameter is error!"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m = SystemChecker(lang=language[<span class="number">0</span>])</span><br><span class="line">                m.get_all()</span><br><span class="line">        <span class="comment"># 如果参数为 -h</span></span><br><span class="line">        <span class="keyword">elif</span> options[<span class="number">0</span>] == <span class="string">"-h"</span> <span class="keyword">or</span> options[<span class="number">0</span>] == <span class="string">"--help"</span>:</span><br><span class="line">            help_center()</span><br><span class="line">        <span class="comment"># 误操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            help_center()</span><br><span class="line">            print(<span class="string">"\n"</span>)</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"You give wrong option! You need read the doc."</span>)</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        print(<span class="string">"You miss 1 argument!"</span>)</span><br><span class="line">        help_center()</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> psutils </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python一些好玩的方法]]></title>
      <url>/2017/12/10/PythonInterestMethods/</url>
      <content type="html"><![CDATA[<hr>
<p>好玩的小方法积累区, 可以跟我补充呀~<br><a id="more"></a></p>
<hr>
<h4 id="Contract">开头唠叨两句</h4>

<p>有啥好玩的方法可以告诉我,积累一些小代码断</p>
<ul>
<li>Author: Leo</li>
<li>Wechat: Leo-sunhailin </li>
<li>QQ: 379978424</li>
<li>E-mail: 379978424@qq.com </li>
</ul>
<hr>
<p>现在有12345五个东西，求分成2，3，4，5组的全排列总和,且每组每个方法不能重复。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 320种</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> itertools.permutations(<span class="string">'12345'</span>, i):</span><br><span class="line">        print([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> j])</span><br></pre></td></tr></table></figure>
<hr>
<p>一般网页请求json数据返回的json到了Python中会变为字典形式,但是Python(3.6还是3.5之前)的字典是无序的,如果业务需求要有序的话,只要做如下修改:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collection <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># url是目标地址</span></span><br><span class="line">result = urllib.request.urlopen(url).read().decode(<span class="string">"UTF-8"</span>)</span><br><span class="line"><span class="comment"># 主要就是object_pairs_hook这块引用OrderedDict.</span></span><br><span class="line">json_result = json.loads(result, object_pairs_hook=OrderedDict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样返回的json字典就是有序的</span></span><br></pre></td></tr></table></figure>
<hr>
<p>如果你的MongoDB数据库中存了类似于这样的数据 LUUID(“e5e1c8ee-cb58-11e7-a088-f82819e1bcfa”), 实际上就UUID类型的数据，这时候改怎么读取回来之后查询呢？</p>
<p>官方文档: <a href="http://api.mongodb.com/python/3.4.0/api/bson/binary.html?highlight=uuid#bson.binary.UUIDLegacy.uuid" target="_blank" rel="noopener">官方文档</a></p>
<p>在讲如何查询之前先说明一下查询回来的结果只有 e5e1c8ee-cb58-11e7-a088-f82819e1bcfa 这一段,而且不能用</p>
<ul>
<li>find({“xxx”: “e5e1c8ee-cb58-11e7-a088-f82819e1bcfa”}) </li>
</ul>
<p>或者 </p>
<ul>
<li>find({“xxx”: “LUUID(“e5e1c8ee-cb58-11e7-a088-f82819e1bcfa”)”})</li>
</ul>
<p>结果都是无法查询到的</p>
<p>接下来先要明白的是MongoDB实际上存储的是一种叫做bson的类json数据格式(可以互换).所以方向有了接下来就是查询BSON里面对于UUID的定义了.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般查全部返回的时候数据str类型的uuid,这时候无法直接回查,需要转换数据格式</span></span><br><span class="line"><span class="comment"># 引入两个包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> UUIDLegacy</span><br><span class="line"><span class="keyword">from</span> bson.binary <span class="keyword">import</span> UUID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如你的uuid是e5e1c8ee-cb58-11e7-a088-f82819e1bcfa, 填进去返回的就是一个bson支持的UUID类型的数据</span></span><br><span class="line">query = &#123;<span class="string">"xxx"</span>: UUIDLegacy(UUID(&lt;你的字符串类型的uuid&gt;))&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你输出query就会发现会是下面这样子的</span></span><br><span class="line"><span class="comment"># &#123;"xxx": UUIDLegacy('&lt;你的UUID&gt;')&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 剩下就是查询语句而已了</span></span><br><span class="line">conn = ...</span><br><span class="line">db = conn[&lt;表名&gt;]</span><br><span class="line">col = db[&lt;集合名&gt;]</span><br><span class="line">col.find(query)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果前提自己不会操作这些UUID的就在存储之前直接写入一个str的uuid。</span></span><br><span class="line"><span class="comment"># 我当时就没有意识到数据类型带来的问题,以为MongoDB会变成字符串.</span></span><br><span class="line"><span class="comment"># 不过这也有收获,知道bson还支持UUID这种数据类型</span></span><br></pre></td></tr></table></figure>
<hr>
<p>求两个List的差集和交集和并集</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 差集和交集基本上差不多.一般来说要求差和求交的情况都是两个长度不对应的时候</span></span><br><span class="line">list_1 = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">list_2 = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集(注意变量的位置, 长的在前,短的在后[说三遍])</span></span><br><span class="line"><span class="comment"># 这里随带说一句,网上很多使用set的difference的方法,但是那样会破坏顺序,所以还是推荐用列表推导式</span></span><br><span class="line">diff_set = [i <span class="keyword">for</span> i <span class="keyword">in</span> list_1 <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> list_2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集(谁先谁后无所谓)</span></span><br><span class="line">public = [i <span class="keyword">for</span> i <span class="keyword">in</span> list_1 <span class="keyword">if</span> i <span class="keyword">in</span> list_2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集(用不了列表推导去写,判断逻辑有点多)</span></span><br><span class="line">union = list(set(list_1).union(set(list_2)))</span><br></pre></td></tr></table></figure>
<hr>
<p>将一个列矩阵转换为对角矩阵</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 意思是这样的 [[1], [2], [3]] ==&gt; [[1, 0, 0], [0, 2, 0], [0, 0, 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(data, pos, max_length)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(data, list):</span><br><span class="line">            data = data[<span class="number">0</span>]</span><br><span class="line">        a = [<span class="number">0</span>] * (max_length - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># a = []</span></span><br><span class="line">        <span class="comment"># [a.insert(j, 0) for j in range(max_length - 1)]</span></span><br><span class="line">        a.insert(pos, data)</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line">    test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    res = [fill(d, i, max_length=len(test)).__next__() <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(test)]</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>
<hr>
<p>斐波那契数列的简化写法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(a, b, max_value)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        <span class="keyword">if</span> max_value != (b &gt; max_value <span class="keyword">and</span> b <span class="keyword">or</span> max_value):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = [<span class="number">1</span>, <span class="number">1</span>] + [num <span class="keyword">for</span> num <span class="keyword">in</span> fibonacci(a=<span class="number">1</span>, b=<span class="number">1</span>, max_value=<span class="number">10</span>)]</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>
<hr>
<p>等分List(有奇偶处理逻辑)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">i_split_by_n</span><span class="params">(ls, n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(ls), n):</span><br><span class="line">        <span class="keyword">yield</span> ls[i:i+n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_by_n</span><span class="params">(ls, group)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    等分List(有奇偶处理逻辑)</span></span><br><span class="line"><span class="string">    逻辑: 将多出的部分和倒数第二组进行合并</span></span><br><span class="line"><span class="string">    :param ls: 需要等分的list</span></span><br><span class="line"><span class="string">    :param group: 组数</span></span><br><span class="line"><span class="string">    :return: 返回划分结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = list(i_split_by_n(ls, int(len(ls) / group)))</span><br><span class="line">    <span class="keyword">if</span> len(res) != group:</span><br><span class="line">        res = res[:<span class="number">-2</span>] + [res[<span class="number">-2</span>] + res[<span class="number">-1</span>]]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list_test = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">14</span>)]</span><br><span class="line">    print(list_test)</span><br><span class="line">    print(split_by_n(ls=list_test, group=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始list:    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</span></span><br><span class="line"><span class="comment"># 分组后(3组): [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13]]</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python编程方面的一些技巧]]></title>
      <url>/2017/11/25/PythonTips/</url>
      <content type="html"><![CDATA[<hr>
<p>Python编程方面的一些技巧<br><a id="more"></a></p>
<hr>
<h4 id="Contract">有补充的可以联系我</h4>

<p>如果有更好的技巧或者是一些心得也可以分享给我~</p>
<ul>
<li>Author: Leo</li>
<li>Contributor: Leo</li>
<li>Wechat: Leo-sunhailin </li>
<li>E-mail: 379978424@qq.com </li>
<li>会一直维护下去,待补充…</li>
</ul>
<hr>
<ul>
<li>序言<ul>
<li><a href="#Contract">补充</a> </li>
</ul>
</li>
<li>目录<ul>
<li><a href="#1">list切片的技巧</a> </li>
<li><a href="#2">多使用列表表达式</a></li>
<li><a href="#3">数据量大的时候尽量使用生成器表达式代替列表表达式</a></li>
<li><a href="#4">使用enumerate代替range</a></li>
<li><a href="#5">合理利用try/except/else/finally</a></li>
<li><a href="#6">使用concurrent.futures,实现并行计算</a></li>
<li><a href="#7">重视精度时使用decimal</a></li>
<li><a href="#8">协作开发的时候尽量不要写import *</a></li>
<li><a href="#9">配置文件独立化</a></li>
</ul>
</li>
</ul>
<hr>
<h4 id="1">1. list切片的技巧 somelist[start:end:stride]</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引最开始到结束，每隔两个取出一个</span></span><br><span class="line"><span class="comment"># 实际上就是肉眼数的奇数位，索引的偶数位</span></span><br><span class="line">odds = test[::<span class="number">2</span>]</span><br><span class="line">print(odds) <span class="comment"># 结果 -&gt; [1, 3, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引第一位到结束，每隔两个取出一个</span></span><br><span class="line"><span class="comment"># 实际上就是肉眼数的偶数位，索引的奇数位</span></span><br><span class="line">evens = test[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(evens) <span class="comment"># 结果 -&gt; [2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于byte的字符串来说还有神奇的特效(only byte)</span></span><br><span class="line">byte_str = <span class="string">b'abcd'</span></span><br><span class="line">print(byte_str[::<span class="number">-1</span>]) <span class="comment"># 结果 -&gt; dcba</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尽量不要很复杂的切片方式，尽量能够多次解决复杂</span></span><br><span class="line"><span class="comment"># 不要同时出现start end stride三个参数</span></span><br></pre></td></tr></table></figure>
<h4 id="2">2. 多使用列表表达式</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 例子没有</span></span><br><span class="line"><span class="comment"># list, dict, set都有对列表表达式的支持</span></span><br><span class="line"><span class="comment"># 列表表达式代替使用map和filter,可以避免写lambda函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 例子</span></span><br><span class="line"><span class="comment"># 列表表达式处理多重for循环</span></span><br><span class="line">martix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">flat_list = [x <span class="keyword">for</span> row <span class="keyword">in</span> martix <span class="keyword">for</span> x <span class="keyword">in</span> row]</span><br><span class="line">print(flat_list) <span class="comment"># 结果 -&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆解代码大致就是:</span></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> martix:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> row:</span><br><span class="line">        new_list.append(x)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 3.例子</span></span><br><span class="line"><span class="comment"># 从一个列表中找出一个数字大于4且是偶数的</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">b = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x &gt; <span class="number">4</span> <span class="keyword">if</span> x % <span class="number">2</span> ==<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">c = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x &gt; <span class="number">4</span> <span class="keyword">and</span> x % <span class="number">2</span> ==<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 结果都是一样的，只是判断上的区别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tips：</span></span><br><span class="line"><span class="comment"># 列表表达式能用就尽量用，可以缩减一些代码量，但是不要写的过于复杂</span></span><br><span class="line"><span class="comment"># 太复杂的表达式，查bug更难找，而且也不利于别人进行维护</span></span><br></pre></td></tr></table></figure>
<h4 id="3">3. 数据量大的时候尽量使用生成器表达式代替列表表达式</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原因很简单,列表表达式需要开辟较大的内存空间进行存储</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">官方解释: 生成器表达式，它是对推导和生成器的一种泛化。</span></span><br><span class="line"><span class="string">生成器在运行时不会将整个输出序列呈现出来，而是会估值为迭代器，</span></span><br><span class="line"><span class="string">这个迭代器每次可以根据生成器表达式产生一项数据。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 例子</span></span><br><span class="line"><span class="comment"># 读取一个多行文本，统计每一行的长度</span></span><br><span class="line">it = (len(x) <span class="keyword">for</span> x <span class="keyword">in</span> open(<span class="string">'&lt;文件路径&gt;/&lt;文件名&gt;.&lt;文件后缀&gt;'</span>)</span><br><span class="line">print(it) <span class="comment"># 结果 -&gt; &lt;generator object &lt;genexpr&gt; at 某个内存地址&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要输出时就用next</span></span><br><span class="line">print(next(it))</span><br></pre></td></tr></table></figure>
<h4 id="4">4. 使用enumerate代替range</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原因很简单，封装的比range好</span></span><br><span class="line">test = [<span class="string">'vannila'</span>, <span class="string">'chocolate'</span>, <span class="string">'pecan'</span>, <span class="string">'strawberry'</span>]</span><br><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="keyword">for</span> i , flavor <span class="keyword">in</span> enumerate(test):</span><br><span class="line">    print(<span class="string">'%d: %s'</span> % (i + <span class="number">1</span>, flavor))</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">1</span>: vannila</span><br><span class="line"><span class="number">2</span>: chcolate</span><br><span class="line"><span class="number">3</span>: pecan</span><br><span class="line"><span class="number">4</span>: strawberry</span><br><span class="line"><span class="comment"># 解释一下: i + 1 实际上就是为了更好看,如果不i + 1,实际上就是索引的位置.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="keyword">for</span> i , flavor <span class="keyword">in</span> enumerate(test, <span class="number">1</span>):</span><br><span class="line">    print(<span class="string">'%d: %s'</span> % (i, flavor))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果一样, 实际上就是在enumerate的函数中已经封装了</span></span><br><span class="line"><span class="comment"># 显得更简便,而且同时能输出索引位置或输出实际中的计数位</span></span><br></pre></td></tr></table></figure>
<h4 id="5">5. 合理利用try/except/else/finally</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># except的例子就不说了，用过都知道</span></span><br><span class="line"><span class="comment"># 直接上else的例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的功能就是: 加载一个json,返回对应key的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_json_key</span><span class="params">(data, key)</span></span></span><br><span class="line"><span class="function">    <span class="title">try</span>:</span></span><br><span class="line">        result_dict = json.loads(data)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">        <span class="keyword">raise</span> KeyError <span class="keyword">from</span> err</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result_dict[key]</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">解释:</span></span><br><span class="line"><span class="string">    实际上这个else可要可不要,因为写在try里面也是可以的</span></span><br><span class="line"><span class="string">    但是如果为了代码的可阅读性,else是一个很必要的东西</span></span><br><span class="line"><span class="string">    代码阅读上就知道try里面是代码中可能存在错误的的地方</span></span><br><span class="line"><span class="string">    如果写在一堆的话,还有错误,那你的except就要增加多几个了</span></span><br><span class="line"><span class="string">    而且写代码也并不建议嵌套try-except,毕竟那不符合代码的风格.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># finally的话,实际上就一个代码清理的过程</span></span><br><span class="line"><span class="comment"># 一般用在IO或者数据库读写上,用来关闭流, 例子就不写了.</span></span><br></pre></td></tr></table></figure>
<h4 id="6">6. 线程方面的—使用concurrent.futures,实现并行计算</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor <span class="keyword">as</span> Pool</span><br><span class="line"><span class="comment"># from multiprocessing import Pool</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">urls = [<span class="string">"http://www.gzcc.cn"</span>, <span class="string">"http://jwxw.gzcc.cn"</span>,</span><br><span class="line">        <span class="string">"http://www.baidu.com"</span>, <span class="string">"http://www.qq.com"</span>,</span><br><span class="line">        <span class="string">"http://www.163.com"</span>, <span class="string">"http://www.sohu.com"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(url, timeout=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url=url, timeout=timeout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> each_url <span class="keyword">in</span> urls:</span><br><span class="line">        response = task(url=each_url)</span><br><span class="line">        print(<span class="string">'%s, %s'</span> % (response.url, response.status_code))</span><br><span class="line">    end_1 = time.time()</span><br><span class="line">    print(<span class="string">"顺序执行的时长: %f"</span> % (end_1 - start_1))</span><br><span class="line"></span><br><span class="line">    start_2 = time.time()</span><br><span class="line">    pool = Pool(max_workers=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># pool = Pool(processes=4)</span></span><br><span class="line">    processes = pool.map(task, urls)</span><br><span class="line">    <span class="keyword">for</span> each_process <span class="keyword">in</span> processes:</span><br><span class="line">        print(<span class="string">'%s, %s'</span> % (each_process.url, each_process.status_code))</span><br><span class="line">    end_2 = time.time()</span><br><span class="line">    print(<span class="string">"并行执行的时长: %f"</span> % (end_2 - start_2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种的结果: 1.4s</span></span><br><span class="line"><span class="comment"># 第二种的结果: 0.4s</span></span><br><span class="line"><span class="comment"># 结果的提升是肯定有的，但是和网络情况有关系。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于导入的包 concurrent.future</span></span><br><span class="line"><span class="comment"># 对于这个包里面的ThreadPoolExecutor和multiprocessing的Pool对比，作用实际上差不多,具体时间差异我还没怎么测试过.</span></span><br><span class="line"><span class="comment"># 但是如果你认真看源码的话会发现,实际上future的包在process的那一块也是调用multiprocessing的</span></span><br><span class="line"><span class="comment"># 按照源码的意思就是在子线程中运行多个python的解释器,从而实现并行.</span></span><br><span class="line"><span class="comment"># 但是一般的代码或者多线程爬虫上基本体会不出,因为爬虫的核心还是在网络速度上,而一般的代码也没必要</span></span><br><span class="line"><span class="comment"># 除非计算矩阵或者其他的需要巨大计算量的时候再考虑使用.</span></span><br></pre></td></tr></table></figure>
<h4 id="7">7. 与分析方面有关的—重视精度时使用decimal</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子</span></span><br><span class="line">rate = <span class="number">1.45</span></span><br><span class="line">seconds = <span class="number">3</span> * <span class="number">60</span> + <span class="number">42</span></span><br><span class="line">cost = rate * seconds / <span class="number">60</span></span><br><span class="line">print(cost) <span class="comment"># 结果很奇怪: 5.364999999999999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时候可能会想到用round的函数</span></span><br><span class="line"><span class="comment"># 1、如果这时你的需求是不足一分也当一分的计算</span></span><br><span class="line"><span class="comment">#    类似于向上取整round的方法会把结果变成5.36而不是5.37</span></span><br><span class="line"><span class="comment"># 2、如果没有要求的时候使用round就可以了</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 针对第一种问题,就引出一个decimal的方法了,改写一下</span></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">rate = Decimal(<span class="string">'1.45'</span>)</span><br><span class="line">seconds = Decimal(<span class="number">3</span> * <span class="number">60</span> + <span class="number">42</span>)</span><br><span class="line">cost = rate * seconds / Decimal(<span class="number">60</span>)</span><br><span class="line">print(cost) <span class="comment"># 结果 -&gt; 5.365</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重点说下这里。</span></span><br><span class="line"><span class="comment"># 有个很奇怪的地方，有兴趣的可以研究下为什么。</span></span><br><span class="line"><span class="comment"># 把rate的那个1.45去掉单引号包围，再运行就明白为什么奇怪了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反观结果, 5.365貌似也不是我们想要的,这里就引入一个quantize方法了</span></span><br><span class="line"><span class="comment"># 在代码顶部加上 </span></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> ROUND_UP</span><br><span class="line"></span><br><span class="line"><span class="comment"># cost还是刚刚的cost</span></span><br><span class="line">rounded = cost.quantize(Decimal(<span class="string">'0.01'</span>), rounding=ROUND_UP)</span><br><span class="line">print(rounded) <span class="comment"># 结果 -&gt; 5.37</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 兜兜转转就到结果这里了.一般这些情况都是对精度要求很高才需要,一般情况就当看不见好了.</span></span><br></pre></td></tr></table></figure>
<h4 id="8">8. 协作开发的时候尽量不要写import *</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你的代码在导包的时候写了<span class="keyword">import</span> *,你自己开发是很明白有什么方法的.</span><br><span class="line">但是在协作开发或者开源项目的时候尽量避免.</span><br><span class="line">因为其他开发者并不知道里面的方法是干啥的.</span><br></pre></td></tr></table></figure>
<h4 id="9">9. 配置文件独立化</h4>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如一些数据库的配置,selenium的webdriver的配置,甚至开发的模式配置可以通过一些json格式的配置文件进行维护.</span></span><br><span class="line"><span class="comment"># 好处1: 在于这样管理项目不用"东奔西跑",为了一个全局变量找半天</span></span><br><span class="line"><span class="comment"># 好处2: 在协同开发的时候,可以不用变动的代码的情况下,根据自己的开发环境确定一些全局配置</span></span><br><span class="line"><span class="comment"># 缺点的话,实际上也算不上缺点.就是每次都要读取一次配置文件,代码的速度会减慢一点点,但是并不碍事.</span></span><br></pre></td></tr></table></figure>
<hr>
<p>回到顶部: <a href="#Contract">传送门</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
